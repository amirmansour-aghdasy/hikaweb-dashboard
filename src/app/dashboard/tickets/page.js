"use client";
import { useState, useMemo } from "react";
import { Box, Grid, Typography, Chip, Button, Stack, Avatar, Card, CardContent, LinearProgress, Tooltip, Badge } from "@mui/material";
import { SupportAgent, Edit, Delete, Add, Assignment, Reply, Close, Schedule, Person, Flag, CheckCircle } from "@mui/icons-material";
import Layout from "@/components/layout/Layout";
import DataTable from "@/components/ui/DataTable";
import Modal from "@/components/ui/Modal";
import TicketForm from "@/components/forms/TicketForm";
import { useApi } from "@/hooks/useApi";
import { useDebounce } from "@/hooks/useDebounce";
import { formatDate, formatRelativeDate } from "@/lib/utils";

const PRIORITY_CONFIG = {
    low: { label: "⁄©ŸÖ", color: "success", icon: "üü¢" },
    normal: { label: "ÿπÿßÿØ€å", color: "info", icon: "üîµ" },
    high: { label: "ÿ®ÿßŸÑÿß", color: "warning", icon: "üü°" },
    urgent: { label: "ŸÅŸàÿ±€å", color: "error", icon: "üî¥" },
};

const STATUS_CONFIG = {
    open: { label: "ÿ®ÿßÿ≤", color: "info" },
    in_progress: { label: "ÿØÿ± ÿ≠ÿßŸÑ ÿ®ÿ±ÿ±ÿ≥€å", color: "warning" },
    waiting_customer: { label: "ÿßŸÜÿ™ÿ∏ÿßÿ± Ÿæÿßÿ≥ÿÆ ŸÖÿ¥ÿ™ÿ±€å", color: "secondary" },
    resolved: { label: "ÿ≠ŸÑ ÿ¥ÿØŸá", color: "success" },
    closed: { label: "ÿ®ÿ≥ÿ™Ÿá", color: "default" },
};

export default function TicketsPage() {
    const [editingTicket, setEditingTicket] = useState(null);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [searchTerm, setSearchTerm] = useState("");
    const [statusFilter, setStatusFilter] = useState("all");
    const [priorityFilter, setPriorityFilter] = useState("all");
    const [assigneeFilter, setAssigneeFilter] = useState("all");

    const debouncedSearchTerm = useDebounce(searchTerm, 800);
    const { useFetchData, useUpdateData, useDeleteData } = useApi();

    // Build query params
    const queryParams = useMemo(() => {
        const params = new URLSearchParams();
        if (debouncedSearchTerm && debouncedSearchTerm.length >= 3) {
            params.append("search", debouncedSearchTerm);
        }
        if (statusFilter !== "all") {
            params.append("status", statusFilter);
        }
        if (priorityFilter !== "all") {
            params.append("priority", priorityFilter);
        }
        if (assigneeFilter !== "all") {
            params.append("assignee", assigneeFilter);
        }
        return params.toString();
    }, [debouncedSearchTerm, statusFilter, priorityFilter, assigneeFilter]);

    const endpoint = `/tickets${queryParams ? `?${queryParams}` : ""}`;

    // Fetch tickets
    const { data: ticketsData, isLoading } = useFetchData(["tickets", queryParams], endpoint);

    // Update ticket
    const updateTicket = useUpdateData("/tickets", {
        successMessage: "ÿ™€å⁄©ÿ™ ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿ¥ÿØ",
    });

    // Delete ticket
    const deleteTicket = useDeleteData("/tickets", {
        successMessage: "ÿ™€å⁄©ÿ™ ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ≠ÿ∞ŸÅ ÿ¥ÿØ",
    });

    const columns = [
        {
            field: "ticketNumber",
            headerName: "ÿ¥ŸÖÿßÿ±Ÿá ÿ™€å⁄©ÿ™",
            width: 120,
            render: (row) => (
                <Typography variant="body2" fontWeight="bold" color="primary">
                    #{row.ticketNumber}
                </Typography>
            ),
        },
        {
            field: "subject",
            headerName: "ŸÖŸàÿ∂Ÿàÿπ",
            flex: 2,
            render: (row) => (
                <Box>
                    <Typography variant="body2" fontWeight="bold">
                        {row.subject}
                    </Typography>
                    <Typography variant="caption" color="text.secondary">
                        {row.description?.length > 60 ? `${row.description.substring(0, 60)}...` : row.description}
                    </Typography>
                </Box>
            ),
        },
        {
            field: "customer",
            headerName: "ŸÖÿ¥ÿ™ÿ±€å",
            width: 180,
            render: (row) => (
                <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
                    <Avatar src={row.customer?.avatar} sx={{ width: 32, height: 32 }}>
                        {row.customer?.name?.charAt(0) || <Person />}
                    </Avatar>
                    <Box>
                        <Typography variant="body2" fontWeight="bold">
                            {row.customer?.name || "⁄©ÿßÿ±ÿ®ÿ± ŸÜÿßÿ¥ŸÜÿßÿ≥"}
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                            {row.customer?.email}
                        </Typography>
                    </Box>
                </Box>
            ),
        },
        {
            field: "priority",
            headerName: "ÿßŸàŸÑŸà€åÿ™",
            width: 100,
            render: (row) => {
                const config = PRIORITY_CONFIG[row.priority] || PRIORITY_CONFIG.normal;
                return <Chip label={config.label} size="small" color={config.color} icon={<span style={{ fontSize: "12px" }}>{config.icon}</span>} />;
            },
        },
        {
            field: "status",
            headerName: "Ÿàÿ∂ÿπ€åÿ™",
            width: 150,
            render: (row) => {
                const config = STATUS_CONFIG[row.status] || STATUS_CONFIG.open;
                return <Chip label={config.label} size="small" color={config.color} variant={row.status === "resolved" ? "filled" : "outlined"} />;
            },
        },
        {
            field: "assignee",
            headerName: "ŸÖÿ≥ÿ¶ŸàŸÑ Ÿæÿßÿ≥ÿÆ",
            width: 150,
            render: (row) =>
                row.assignee ? (
                    <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
                        <Avatar src={row.assignee.avatar} sx={{ width: 24, height: 24 }}>
                            {row.assignee.name?.charAt(0)}
                        </Avatar>
                        <Typography variant="caption">{row.assignee.name}</Typography>
                    </Box>
                ) : (
                    <Chip label="ÿ™ÿÆÿµ€åÿµ ŸÜ€åÿßŸÅÿ™Ÿá" size="small" variant="outlined" />
                ),
        },
        {
            field: "category",
            headerName: "ÿØÿ≥ÿ™Ÿá‚Äåÿ®ŸÜÿØ€å",
            width: 120,
            render: (row) =>
                row.category ? (
                    <Chip label={row.category} size="small" color="primary" variant="outlined" />
                ) : (
                    <Typography variant="caption" color="text.secondary">
                        ÿ®ÿØŸàŸÜ ÿØÿ≥ÿ™Ÿá
                    </Typography>
                ),
        },
        {
            field: "responseTime",
            headerName: "ÿ≤ŸÖÿßŸÜ Ÿæÿßÿ≥ÿÆ",
            width: 120,
            render: (row) => (
                <Box>
                    {row.firstResponseAt ? (
                        <Typography variant="caption" color="success.main">
                            Ÿæÿßÿ≥ÿÆ ÿØÿßÿØŸá ÿ¥ÿØŸá
                        </Typography>
                    ) : (
                        <Typography variant="caption" color="warning.main">
                            ÿØÿ± ÿßŸÜÿ™ÿ∏ÿßÿ± Ÿæÿßÿ≥ÿÆ
                        </Typography>
                    )}
                    <Typography variant="caption" display="block">
                        {formatRelativeDate(row.createdAt)}
                    </Typography>
                </Box>
            ),
        },
        {
            field: "lastActivity",
            headerName: "ÿ¢ÿÆÿ±€åŸÜ ŸÅÿπÿßŸÑ€åÿ™",
            width: 120,
            render: (row) => <Typography variant="caption">{formatRelativeDate(row.updatedAt)}</Typography>,
        },
    ];

    const handleEdit = (ticket) => {
        setEditingTicket(ticket);
        setIsModalOpen(true);
    };

    const handleDelete = (ticket) => {
        if (window.confirm("ÿ¢€åÿß ÿßÿ≤ ÿ≠ÿ∞ŸÅ ÿß€åŸÜ ÿ™€å⁄©ÿ™ ÿßÿ∑ŸÖ€åŸÜÿßŸÜ ÿØÿßÿ±€åÿØÿü")) {
            deleteTicket.mutate(ticket._id);
        }
    };

    const handleAssign = (ticket) => {
        // Open assignment modal or dropdown
        console.log("Assign ticket:", ticket);
    };

    const handleStatusChange = (ticket, newStatus) => {
        updateTicket.mutate({
            id: ticket._id,
            data: { status: newStatus },
        });
    };

    const handlePriorityChange = (ticket, newPriority) => {
        updateTicket.mutate({
            id: ticket._id,
            data: { priority: newPriority },
        });
    };

    const handleAdd = () => {
        setEditingTicket(null);
        setIsModalOpen(true);
    };

    const handleSearch = (searchValue) => {
        setSearchTerm(searchValue);
    };

    const handleSaveTicket = () => {
        setIsModalOpen(false);
        setEditingTicket(null);
    };

    const customActions = [
        {
            label: "Ÿæÿßÿ≥ÿÆ",
            icon: <Reply />,
            onClick: (ticket) => handleEdit(ticket),
            color: "primary",
            show: (ticket) => ticket.status !== "closed",
        },
        {
            label: "ÿ™ÿÆÿµ€åÿµ",
            icon: <Assignment />,
            onClick: handleAssign,
            color: "info",
            show: (ticket) => !ticket.assignee,
        },
        {
            label: "ÿ≠ŸÑ ÿ¥ÿØŸá",
            icon: <CheckCircle />,
            onClick: (ticket) => handleStatusChange(ticket, "resolved"),
            color: "success",
            show: (ticket) => ticket.status !== "resolved" && ticket.status !== "closed",
        },
        {
            label: "ÿ®ÿ≥ÿ™ŸÜ",
            icon: <Close />,
            onClick: (ticket) => handleStatusChange(ticket, "closed"),
            color: "warning",
            show: (ticket) => ticket.status !== "closed",
        },
        {
            label: "ÿ≠ÿ∞ŸÅ",
            icon: <Delete />,
            onClick: handleDelete,
            color: "error",
        },
    ];

    const filters = [
        {
            key: "status",
            label: "Ÿàÿ∂ÿπ€åÿ™",
            value: statusFilter,
            onChange: setStatusFilter,
            options: [
                { value: "all", label: "ŸáŸÖŸá" },
                { value: "open", label: "ÿ®ÿßÿ≤" },
                { value: "in_progress", label: "ÿØÿ± ÿ≠ÿßŸÑ ÿ®ÿ±ÿ±ÿ≥€å" },
                { value: "waiting_customer", label: "ÿßŸÜÿ™ÿ∏ÿßÿ± Ÿæÿßÿ≥ÿÆ ŸÖÿ¥ÿ™ÿ±€å" },
                { value: "resolved", label: "ÿ≠ŸÑ ÿ¥ÿØŸá" },
                { value: "closed", label: "ÿ®ÿ≥ÿ™Ÿá" },
            ],
        },
        {
            key: "priority",
            label: "ÿßŸàŸÑŸà€åÿ™",
            value: priorityFilter,
            onChange: setPriorityFilter,
            options: [
                { value: "all", label: "ŸáŸÖŸá" },
                { value: "low", label: "⁄©ŸÖ" },
                { value: "normal", label: "ÿπÿßÿØ€å" },
                { value: "high", label: "ÿ®ÿßŸÑÿß" },
                { value: "urgent", label: "ŸÅŸàÿ±€å" },
            ],
        },
        {
            key: "assignee",
            label: "ŸÖÿ≥ÿ¶ŸàŸÑ",
            value: assigneeFilter,
            onChange: setAssigneeFilter,
            options: [
                { value: "all", label: "ŸáŸÖŸá" },
                { value: "unassigned", label: "ÿ™ÿÆÿµ€åÿµ ŸÜ€åÿßŸÅÿ™Ÿá" },
                { value: "me", label: "ÿ™€å⁄©ÿ™‚ÄåŸáÿß€å ŸÖŸÜ" },
            ],
        },
    ];

    // Summary Cards Component
    const SummaryCards = () => {
        const summary = ticketsData?.summary || {};

        return (
            <Grid container spacing={2} sx={{ mb: 3 }}>
                <Grid item size={{ xs: 12, sm: 6, md: 3 }}>
                    <Card>
                        <CardContent sx={{ textAlign: "center", py: 2 }}>
                            <Typography variant="h4" color="info.main">
                                {summary.open || 0}
                            </Typography>
                            <Typography variant="body2" color="text.secondary">
                                ÿ™€å⁄©ÿ™‚ÄåŸáÿß€å ÿ®ÿßÿ≤
                            </Typography>
                        </CardContent>
                    </Card>
                </Grid>

                <Grid item size={{ xs: 12, sm: 6, md: 3 }}>
                    <Card>
                        <CardContent sx={{ textAlign: "center", py: 2 }}>
                            <Typography variant="h4" color="warning.main">
                                {summary.in_progress || 0}
                            </Typography>
                            <Typography variant="body2" color="text.secondary">
                                ÿØÿ± ÿ≠ÿßŸÑ ÿ®ÿ±ÿ±ÿ≥€å
                            </Typography>
                        </CardContent>
                    </Card>
                </Grid>

                <Grid item size={{ xs: 12, sm: 6, md: 3 }}>
                    <Card>
                        <CardContent sx={{ textAlign: "center", py: 2 }}>
                            <Typography variant="h4" color="error.main">
                                {summary.urgent || 0}
                            </Typography>
                            <Typography variant="body2" color="text.secondary">
                                ŸÅŸàÿ±€å
                            </Typography>
                        </CardContent>
                    </Card>
                </Grid>

                <Grid item size={{ xs: 12, sm: 6, md: 3 }}>
                    <Card>
                        <CardContent sx={{ textAlign: "center", py: 2 }}>
                            <Typography variant="h4" color="success.main">
                                {summary.resolved || 0}
                            </Typography>
                            <Typography variant="body2" color="text.secondary">
                                ÿ≠ŸÑ ÿ¥ÿØŸá ÿßŸÖÿ±Ÿàÿ≤
                            </Typography>
                        </CardContent>
                    </Card>
                </Grid>
            </Grid>
        );
    };

    return (
        <Layout>
            <Box>
                <Box sx={{ mb: 3, display: "flex", justifyContent: "space-between", alignItems: "center" }}>
                    <Box>
                        <Typography variant="h4" fontWeight="bold">
                            ŸÖÿØ€åÿ±€åÿ™ ÿ™€å⁄©ÿ™‚ÄåŸáÿß€å Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å
                        </Typography>
                        <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                            ŸÖÿØ€åÿ±€åÿ™ ÿØÿ±ÿÆŸàÿßÿ≥ÿ™‚ÄåŸáÿß Ÿà ÿ™€å⁄©ÿ™‚ÄåŸáÿß€å Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ŸÖÿ¥ÿ™ÿ±€åÿßŸÜ
                        </Typography>
                    </Box>

                    <Button variant="contained" startIcon={<Add />} onClick={handleAdd} size="large">
                        ÿ™€å⁄©ÿ™ ÿ¨ÿØ€åÿØ
                    </Button>
                </Box>

                <SummaryCards />

                <DataTable
                    title="ŸÑ€åÿ≥ÿ™ ÿ™€å⁄©ÿ™‚ÄåŸáÿß€å Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å"
                    data={ticketsData?.data || []}
                    columns={columns}
                    loading={isLoading}
                    pagination={ticketsData?.pagination}
                    onSearch={handleSearch}
                    onEdit={handleEdit}
                    onAdd={handleAdd}
                    searchPlaceholder="ÿ¨ÿ≥ÿ™ÿ¨Ÿà ÿØÿ± ÿ™€å⁄©ÿ™‚ÄåŸáÿß (ÿ≠ÿØÿßŸÇŸÑ 3 ⁄©ÿßÿ±ÿß⁄©ÿ™ÿ±)..."
                    enableSelection={true}
                    customActions={customActions}
                    filters={filters}
                    emptyStateProps={{
                        title: "ÿ™€å⁄©ÿ™€å €åÿßŸÅÿ™ ŸÜÿ¥ÿØ",
                        description: "ŸáŸÜŸàÿ≤ ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å‚Äåÿß€å ÿ´ÿ®ÿ™ ŸÜÿ¥ÿØŸá ÿßÿ≥ÿ™.",
                        action: {
                            label: "ÿß€åÿ¨ÿßÿØ ÿ™€å⁄©ÿ™ ÿ¨ÿØ€åÿØ",
                            onClick: handleAdd,
                        },
                    }}
                />

                {/* Ticket Form Modal */}
                <Modal open={isModalOpen} onClose={() => setIsModalOpen(false)} title={editingTicket ? "Ÿæÿßÿ≥ÿÆ ÿ®Ÿá ÿ™€å⁄©ÿ™" : "ÿß€åÿ¨ÿßÿØ ÿ™€å⁄©ÿ™ ÿ¨ÿØ€åÿØ"} maxWidth="lg" fullWidth>
                    <TicketForm ticket={editingTicket} onSave={handleSaveTicket} onCancel={() => setIsModalOpen(false)} />
                </Modal>
            </Box>
        </Layout>
    );
}
